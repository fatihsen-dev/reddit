generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    username      String?        @unique
    desc          String?
    email         String?        @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    votes         Vote[]
    unVotes       UnVote[]
    comments      Comment[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    followers     UserFollower[] @relation("followedTo")
    following     UserFollower[] @relation("followerTo")
}

model UserFollower {
    id         String   @id @default(cuid())
    followerId String
    followedId String
    createdAt  DateTime @default(now())
    follower   User     @relation(fields: [followerId], references: [id], name: "followerTo")
    followed   User     @relation(fields: [followedId], references: [id], name: "followedTo")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String
    content   String?
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    public    Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    votes     Vote[]
    unVotes   UnVote[]
    comments  Comment[]

    @@index([title])
}

model Vote {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())
}

model UnVote {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())
}

model Comment {
    id        Int      @id @default(autoincrement())
    content   String?
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    createdAt DateTime @default(now())
}
